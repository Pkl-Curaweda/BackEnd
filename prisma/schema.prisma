generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESS
  DELIVERED
  DONE
  CANCEL
}

enum RoomType {
  STANDARD
  DELUXE
  FAMILY
}

// Front Office Area ==========================================================

model Guest {
  id       Int     @id @default(autoincrement())
  name     String
  contact  String
  email    String
  username String
  password String
  orders   Order[]
}

// This table is for admin & mitra (hotel)
model Role {
  id         Int      @id @default(autoincrement())
  name       String
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  gender     Gender
  phone      String
  picture    String
  birthday   DateTime
  nik        String
  email      String   @unique
  username   String   @unique
  password   String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Room {
  id               Int            @id @default(autoincrement())
  room_type        RoomType
  room_image       String
  room_status      Int
  room_code        Int
  category         String
  floor            Int
  i                Int
  occupied_status  Boolean
  overlook         String
  description      String
  bed_setup        String
  connecting       String
  room_capacity_id Int
  rate_code        Float
  roomFacilities   RoomFacility[]
  order            Order[]
  resvRooms        ResvRoom[]
}

model RoomFacility {
  id         Int      @id @default(autoincrement())
  name       String
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Reservation {
  id                  Int          @id @default(autoincrement())
  agencyName          String
  resvQty             ResvQty      @relation(fields: [resvQtyId], references: [id])
  resvQtyId           Int
  resvStatus          ResvStatus   @relation(fields: [resvStatusId], references: [id])
  resvStatusId        Int
  groupReservation    Boolean
  finishedReservation Boolean
  currency            String
  code                String
  reserver            Reserver     @relation(fields: [reserverId], references: [id])
  reserverId          Int
  fixRate             Boolean
  m                   String
  l                   String
  argtCode            String
  day                 Int
  night               Int
  arrivalDate         DateTime
  departureDate       DateTime
  checkoutDate        DateTime
  canceledDate        DateTime
  resvFlights         ResvFlight[]
  resvRooms           ResvRoom[]
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt
}

model Reserver {
  id           Int           @id @default(autoincrement())
  groupName    String
  kCard        String
  nation       String
  purpose      String
  resident     String
  guestId      Int
  reservations Reservation[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

model ResvFlight {
  id              Int         @id @default(autoincrement())
  reservation     Reservation @relation(fields: [reservationId], references: [id])
  reservationId   Int
  arrivalFlight   DateTime
  departureFlight DateTime
  pickedUp        Boolean
  drop            Boolean
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
}

model ResvRoom {
  id            Int         @id @default(autoincrement())
  room          Room        @relation(fields: [roomId], references: [id])
  roomId        Int
  quantity      Int
  note          String      @db.Text
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model ResvQty {
  id          Int           @id @default(autoincrement())
  manyAdult   Int
  manyChild   Int
  manyRoom    Int
  reservation Reservation[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

model ResvStatus {
  id          Int           @id @default(autoincrement())
  desc        String        @db.Text
  hexCode     String
  reservation Reservation[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

// End Front Office Area ======================================================

// House Keeping Area =========================================================

// End House Keeping Area =====================================================

// In Room Service Area =======================================================

model ServiceType {
  id         Int       @id @default(autoincrement())
  name       String
  services   Service[]
  subTypes   SubType[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model SubType {
  id            Int          @id @default(autoincrement())
  name          String
  serviceType   ServiceType  @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId Int
  productReqs   ProductReq[]
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model Service {
  id            Int           @id @default(autoincrement())
  name          String
  price         Int
  desc          String
  picture       String
  serviceType   ServiceType   @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId Int
  orderDetails  OrderDetail[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model ProductReq {
  id         Int      @id @default(autoincrement())
  title      String
  type       SubType  @relation(fields: [typeId], references: [id])
  typeId     Int
  desc       String
  price      Int
  picture    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PaymentMethod {
  id         Int       @id @default(autoincrement())
  name       String
  payments   Payment[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Payment {
  id              Int           @id @default(autoincrement())
  name            String
  code            String
  params          String?
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
  transactions    Transaction[]
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model Transaction {
  id         String        @id
  name       String
  status     PaymentStatus
  payment    Payment       @relation(fields: [paymentId], references: [id])
  paymentId  Int
  order      Order?
  created_at DateTime      @default(now())
  expired_at DateTime?
  updated_at DateTime      @updatedAt
}

model Order {
  id            String        @id
  guest         Guest         @relation(fields: [guestId], references: [id])
  guestId       Int
  room          Room          @relation(fields: [roomId], references: [id])
  roomId        Int
  subtotal      Float
  total         Float
  ppn           Float
  fees          Float
  status        OrderStatus
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  transactionId String        @unique
  orderDetails  OrderDetail[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model OrderDetail {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
  price      Float
  qty        Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// End In Room Service Area ===================================================
