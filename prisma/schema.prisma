generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESS
  DELIVERED
  DONE
  CANCEL
}

enum RoomType {
  DELUXE
  FAMILY
  STANDARD
}

enum StatusProductReq {
  PENDING
  REJECTED
  ACCEPTED
}

enum BedType {
  KING
  SINGLE
  TWIN
}

enum cardIdentifier {
  KTP
  SIM
}

enum LostFoundStatus {
  LOST
  FOUND
  ONPROGRESS
}

enum xTypeRoom {
  OOO
  OM
  HU
  COMP
}

enum maidTaskColor {
  F28585 //#F28585 //Urgent task
  FFFC9B //#FFFC9B //Current working task
  FFFFFF //#FFFFFF //Existed task
  BBE2EC //#BBE2EC //OK / Finished task
  B7E5B4 //#B7E5B4 Need to be checked by supervisor
}

// Front Office Area ==========================================================

model Role {
  id         Int      @id @default(autoincrement())
  name       String
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Guest {
  id       Int          @id @default(autoincrement())
  name     String?
  contact  String?
  username String       @unique
  password String
  Tokens   GuestToken[]
  orders   Order[]
  Reserver Reserver[]
  User     User[]
}

// This table is for admin & mitra (hotel)

model User {
  id            Int          @id @default(autoincrement())
  name          String
  gender        Gender
  phone         String
  picture       String
  birthday      DateTime
  nik           String
  email         String       @unique
  username      String       @unique
  password      String
  role          Role         @relation(fields: [roleId], references: [id])
  roleId        Int
  guest         Guest?       @relation(fields: [guestId], references: [id])
  guestId       Int?
  room          Room?        @relation(fields: [roomId], references: [id])
  roomId        Int?
  service       Service[]
  productReqs   ProductReq[]
  cleanRooms    CleanRoom[]
  Tokens        UserToken[]
  DirtyRoom     DirtyRoom[]
  roomMaids     RoomMaid[]
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  lostFounds    LostFound[]  @relation("LostFound_user")
  lostFoundsPic LostFound[]  @relation("LostFound_pic")
  OooOmRoom     OooOmRoom[]
}

model UserToken {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  expired_at   DateTime
}

model GuestToken {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  guest        Guest    @relation(fields: [guestId], references: [id])
  guestId      Int
  expired_at   DateTime
}

model Reservation {
  id                 Int               @id @default(autoincrement())
  resvStatus         ResvStatus        @relation(fields: [resvStatusId], references: [id])
  resvStatusId       Int
  specialTreatment   SpecialTreatment? @relation(fields: [specialTreatmentId], references: [id])
  specialTreatmentId Int?
  reserver           Reserver          @relation(fields: [reserverId], references: [id])
  reserverId         Int
  manyAdult          Int
  manyChild          Int
  manyBaby           Int
  manyNight          Int
  borderColor        String?           @default("#16a75c")
  reservationRemarks String?           @default("") @db.Text
  onGoingReservation Boolean?          @default(true)
  inHouseIndicator   Boolean?          @default(false)
  arrivalDate        DateTime
  departureDate      DateTime
  checkInDate        DateTime?
  checkoutDate       DateTime?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  resvRooms          ResvRoom[]
  cleanRooms         CleanRoom[]
  dirtyRooms         DirtyRoom[]
  idCard             idCard[]
  OooOmRoom          OooOmRoom[]
}

model SpecialTreatment {
  id          Int           @id @default(autoincrement())
  description String
  rowColor    String
  textColor   String
  Reservation Reservation[]
}

model ResvStatus {
  id          Int           @id @default(autoincrement())
  description String
  rowColor    String
  textColor   String
  reservation Reservation[]
  cleanRooms  CleanRoom[]
  DirtyRoom   DirtyRoom[]
}

model ResvRoom {
  id               Int            @id @default(autoincrement())
  reservation      Reservation    @relation(fields: [reservationId], references: [id])
  reservationId    Int
  room             Room           @relation(fields: [roomId], references: [id])
  roomId           Int
  arrangment       ArrangmentCode @relation(fields: [arrangmentCodeId], references: [id])
  arrangmentCodeId String
  roomMaids        RoomMaid       @relation(fields: [roomMaidId], references: [id])
  roomMaidId       Int 
  billComment      String?        @db.Text
  voucher          Voucher?       @relation(fields: [voucherId], references: [id])
  voucherId        String?
  deleted          Boolean        @default(false)
  roomChanges      RoomChange[]
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  Invoice          Invoice[]
  ResvPayment      ResvPayment[]
}

model Voucher {
  id         String     @id
  abilites   String     @db.Text
  arithmatic String     @db.Text
  ResvRoom   ResvRoom[]
}

model Reserver {
  id           Int           @id @default(autoincrement())
  guest        Guest         @relation(fields: [guestId], references: [id])
  guestId      Int
  resourceName String
  billComment  String?       @db.Text
  reservations Reservation[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

model idCard {
  id             Int            @id @default(autoincrement())
  reservation    Reservation    @relation(fields: [reservationId], references: [id])
  reservationId  Int
  name           String
  cardIdentifier cardIdentifier
  cardId         String
  address        String         @db.Text
}

model ArrangmentCode {
  id       String     @id
  rate     Float
  ResvRoom ResvRoom[]
  Room     Room[]
}

model Invoice {
  id            Int          @id @default(autoincrement())
  resvRoom      ResvRoom     @relation(fields: [resvRoomId], references: [id])
  resvRoomId    Int
  articleType   ArticleType? @relation(fields: [articleTypeId], references: [id])
  articleTypeId Int?
  qty           Int
  room          Room         @relation(fields: [roomId], references: [id])
  roomId        Int
  rate          Float
  dateUsed      DateTime?
  dateReturn    DateTime?
  orderDetail   OrderDetail? @relation(fields: [orderDetailId], references: [id])
  orderDetailId Int?
  paid          Boolean      @default(false)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ArticleType {
  id          Int       @id @unique
  description String    @db.Text
  price       Float
  Invoice     Invoice[]
  Stock       Stock[]
}

model ResvPayment {
  id            Int      @id @default(autoincrement())
  resvRoom      ResvRoom @relation(fields: [resvRoomId], references: [id])
  resvRoomId    Int
  paymentMethod String
  orders        Json
  total         Float
  tax           Float    @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Notification {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  created_at DateTime @default(now())
}

// End Front Office Area ======================================================

// House Keeping Area =========================================================
model Department {
  id        Int         @id @default(autoincrement())
  shortDesc String
  longDesc  String      @db.Text
  roomMaids RoomMaid[]
  TaskType  TaskType[]
  OooOmRoom OooOmRoom[]
}

model RoomStatus {
  id               Int    @id @default(autoincrement())
  shortDescription String
  longDescription  String @db.Text
  rowColor         String
  textColor        String
  Room             Room[]
}

model Room {
  id              Int            @id @default(autoincrement())
  roomType        RoomType
  roomImage       String
  roomStatus      RoomStatus     @relation(fields: [roomStatusId], references: [id])
  roomStatusId    Int
  floor           Int
  bedSetup        BedType
  description     String
  occupied_status Boolean
  rateCode        ArrangmentCode @relation(fields: [rate], references: [id])
  rate            String
  updatedAt       DateTime       @updatedAt
  roomChangesFrom RoomChange[]   @relation("RoomChangeFrom")
  roomChangesTo   RoomChange[]   @relation("RoomChangeTo")
  order           Order[]
  resvRooms       ResvRoom[]
  cleanRooms      CleanRoom[]
  dirtyRooms      DirtyRoom[]
  lostFounds      LostFound[]
  MaidTask        MaidTask[]
  OooOmRoom       OooOmRoom[]
  Invoice         Invoice[]
  User            User[]
}

model RoomChange {
  id         Int      @id @default(autoincrement())
  roomFrom   Room     @relation(name: "RoomChangeFrom", fields: [roomFromId], references: [id])
  roomFromId Int
  roomTo     Room     @relation(name: "RoomChangeTo", fields: [roomToId], references: [id])
  roomToId   Int
  resvRoom   ResvRoom @relation(fields: [resvRoomId], references: [id])
  resvRoomId Int
  reason     String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model RoomMaid {
  id            Int        @id @default(autoincrement())
  user          User       @relation(fields: [userId], references: [id])
  userId        Int
  aliases       String
  shift         Shift      @relation(fields: [shiftId], references: [id])
  shiftId       Int
  urgentTask    Int?
  currentTask   Int?
  rawPerfomance Int        @default(0)
  finishedTask  Int        @default(0)
  workload      Int        @default(0)
  department    Department @relation(fields: [departmentId], references: [id])
  departmentId  Int
  MaidTask      MaidTask[]
  ResvRoom      ResvRoom[]
  updated_at    DateTime   @updatedAt
}

model Shift {
  id            Int        @id @default(autoincrement())
  description   String     @unique
  startTime     String     @db.Text
  endTime       String     @db.Text
  restTimeStart String     @db.Text
  restTimeEnd   String     @db.Text
  workTime      Int
  UoM           String
  RoomMaid      RoomMaid[]
}

model MaidTask {
  id          Int           @id @default(autoincrement())
  room        Room          @relation(fields: [roomId], references: [id])
  roomId      Int
  request     String        @db.Text
  roomMaid    RoomMaid      @relation(fields: [roomMaidId], references: [id])
  roomMaidId  Int
  type        TaskType      @relation(fields: [typeId], references: [id])
  typeId      String
  schedule    String
  rowColor    maidTaskColor @default(FFFFFF)
  finished    Boolean       @default(false)
  actual      Int?
  UoM         String?
  performance Int?
  startTime   DateTime?
  endTime     DateTime?
  checkedTime DateTime?
  comment     String?       @db.Text
  status      String?
  mainStatus  String        @default("WAITING")
  updated_at  DateTime      @updatedAt
  created_at  DateTime      @default(now())
}

model TaskType {
  id           String     @id @unique
  activity     String
  standardTime Int
  UoM          String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  MaidTask     MaidTask[]
}

model CleanRoom {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  resvStatus    ResvStatus  @relation(fields: [resvStatusId], references: [id])
  resvStatusId  Int
  description   String      @db.Text
  room          Room        @relation(fields: [roomId], references: [id])
  roomId        Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model DirtyRoom {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  resvStatus    ResvStatus  @relation(fields: [resvStatusId], references: [id])
  resvStatusId  Int
  description   String      @db.Text
  room          Room        @relation(fields: [roomId], references: [id])
  roomId        Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model OooOmRoom {
  id            Int          @id @default(autoincrement())
  xType         xTypeRoom
  room          Room         @relation(fields: [roomId], references: [id])
  roomId        Int
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  reservationId Int?
  reason        String       @db.Text
  from          DateTime
  until         DateTime
  description   String       @db.Text
  departmentId  Int?
  department    Department?  @relation(fields: [departmentId], references: [id])
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model Stock {
  id            Int         @id @default(autoincrement())
  articleType   ArticleType @relation(fields: [articleTypeId], references: [id])
  articleTypeId Int
  remain        Int
  rStock        Int
}

model LostFound {
  id          Int             @id @default(autoincrement())
  room        Room            @relation(fields: [roomId], references: [id])
  roomId      Int
  pic         User            @relation("LostFound_pic", fields: [picId], references: [id])
  picId       Int
  user        User?           @relation("LostFound_user", fields: [userId], references: [id])
  userId      Int?
  phoneNumber String?
  location    String
  image       String
  status      LostFoundStatus @default(value: LOST)
  description String          @db.Text
  finished_at DateTime?
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  deleted     Boolean         @default(false)
}

// End House Keeping Area =====================================================

// In Room Service Area =======================================================

model ServiceType {
  id         Int          @id @default(autoincrement())
  name       String
  open       String
  close      String
  services   Service[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  ProductReq ProductReq[]
}

model SubType {
  id          Int          @id @default(autoincrement())
  name        String
  services    Service[]
  productReqs ProductReq[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model Service {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  name          String
  price         Int
  desc          String
  picture       String
  serviceType   ServiceType   @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId Int
  subType       SubType       @relation(fields: [subTypeId], references: [id])
  subTypeId     Int
  orderDetails  OrderDetail[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model ProductReq {
  id               Int              @id @default(autoincrement())
  title            String
  user             User             @relation(fields: [userId], references: [id])
  userId           Int
  type             SubType          @relation(fields: [typeId], references: [id])
  typeId           Int
  desc             String
  price            Int
  picture          String
  statusProductReq StatusProductReq @default(PENDING)
  serviceType      ServiceType      @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId    Int
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
}

model PaymentMethod {
  id         Int       @id @default(autoincrement())
  name       String
  payments   Payment[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Payment {
  id              Int           @id @default(autoincrement())
  name            String
  code            String
  params          String?
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
  transactions    Transaction[]
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model Order {
  id           String        @id @default(uuid())
  guest        Guest         @relation(fields: [guestId], references: [id])
  guestId      Int
  room         Room          @relation(fields: [roomId], references: [id])
  roomId       Int
  subtotal     Float
  total        Float
  ppn          Float
  fees         Float
  transaction  Transaction?
  orderDetails OrderDetail[]
  orderTracks  OrderTrack[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

model Transaction {
  id         Int           @id @default(autoincrement())
  name       String
  status     PaymentStatus
  payment    Payment       @relation(fields: [paymentId], references: [id])
  paymentId  Int
  order      Order         @relation(fields: [orderId], references: [id])
  orderId    String        @unique
  qrCode     String?
  created_at DateTime      @default(now())
  expired_at DateTime?
  updated_at DateTime      @updatedAt
}

model OrderTrack {
  id         Int         @id @default(autoincrement())
  order      Order       @relation(fields: [orderId], references: [id])
  orderId    String
  status     OrderStatus @default(PENDING)
  time       DateTime    @default(now())
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  @@unique([orderId, status])
}

model OrderDetail {
  id         Int       @id @default(autoincrement())
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  service    Service   @relation(fields: [serviceId], references: [id])
  serviceId  Int
  price      Float
  qty        Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Invoice    Invoice[]
}

// End In Room Service Area ===================================================
